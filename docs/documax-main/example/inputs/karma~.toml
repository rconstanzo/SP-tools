[object]
name = "karma~"
module = "karma"
category = ""
digest = "Varispeed Audio Looper"
seealso =  ['buffer~', 'groove~', 'phasegroove~', 'play~', 'poke~', 'record~', 'wave~', 'waveform~']
description = 'A dynamically lengthened varispeed record/playback looper with complex functionality.'
discussion = """
    <h4><openfilelink filename="karma_overview.maxpat">Open the Overview Patch</openfilelink></h4>
    <p>The <o>karma~</o> object is a dynamically lengthed varispeed sample-recording and playback object with complex functionality, which references the audio information stored in a <o>buffer~</o> object having the same name.</p>
"""

[metadata]
author = 'Rodrigo Constanzo, raja, and Pete'
tags = ['Live Sampling', 'Looping']

[inlets]
[inlets.0]
type="signal"
digest="Audio Inlet(s)"
description="Number of signal inlets depends on <m>channels</m> argument to object."

[inlets.1]
type="signal"
digest="Speed factor (signal or float)"
description="Varispeed: <b>1.</b> = normal speed, <b>0.5</b> = half speed, <b>2.</b> = double speed, etc."

[outlets]
[outlets.0]
type="signal"
digest="Audio Outlet(s)"
description="Number of signal outlets depends on <m>channels</m> (2nd) argument to object."

[outlets.1]
type="signal"
digest="Signal rate sync outlet phase 0..1"
description="If the <at>syncout</at> attribute is true, this outlet appears as penultimate outlet, otherwise it is absent (default)."

[outlets.2]
type="list"
digest="Real time list outlet with data of internal <o>karma~</o> state."
description="""
Always the last (right-most) outlet. List containing 7 atoms:<br />
atom 1 = current position (float 0..1)<br />
atom 2 = play state (int 0/1)<br />
atom 3 = record state (int 0/1)<br />
atom 4 = start position (float ms)<br />
atom 5 = end position (float ms)<br />
atom 6 = window size (float ms)<br />
atom 7 = current state (int 0..5, 0=stop 1=play 2=record 3=overdub 4=append 5=initial)<br />
"""

[arguments]
[arguments.buffername]
optional = 0
type = "symbol"
digest = "Name of <o>buffer~</o> to be associated with the <o>karma~</o> instance"
description = """
<o>karma~</o> will not operate without an associated <o>buffer~</o>.
The associated <o>buffer~</o> determines memory and length (if associating a buffer~ of <b>0 ms</b> in size <o>karma~</o> will do nothing).
The associated <o>buffer~</o> can be changed on the fly (see the <m>set</m> message) but one must be present on instantiation.
"""

[arguments.channels]
optional = 1
type = "int"
digest = "Set the number of output channels"
description = """
Set the number of output channels to use with the <o>karma~</o> instance.
Channel counts can be 1, 2 or 4. The number of audio outlets will change depending on this argument.
The default is 1.
"""

[messages]
[messages.append]
digest = "(get ready for) append recording"
description = """
Sending a message of <m>append</m> will put karma back in it's "initial loop creation" state, allowing for new defitions of the loop in/out points. From a stopped state, after creating an initial loop, sending an <m>append</m> message will show the whole <o>buffer~</o> in the GUI showing that the existing loop is ready to be appended. <br /><br />
Hitting <m>record</m> will then begin recording where the loop previously ended. You can leave this append state by hitting <m>play</m>, <m>record</m>, or <m>stop</m>. If you send an <m>append</m> message while in a play state, you can play into a new part of the <o>buffer~</o>, and if you send an <m>append</m> message while in an overdub state, you can record into a new part of the buffer.
"""

[messages.jump]
digest = "Jump location"
description = "Jumps to a position in the defined sample (in normalized segment length float 0..1). If <o>karma~</o> is playing, jumping will immediately jump to the phase indicated by the incoming message and carry on playing. Jumping while overdubbing will jump to that position and carry on recording. Jumping while the object is stopped will set the start position for the next time the play message is received."
args = [
	{ name="location", type="float", optional=0 }
]

[messages.mouse]
digest = "Open a file buffer display window"
description = "Double-clicking on a <o>karma~</o> object opens the sample display window of the <o>buffer~</o> object currently associated with the <o>karma~</o> object."

[messages.overdub]
digest = "Overdubbing amplitude (linear)"
description = "Sets the amount (in linear amplitude) by which to multiply the material in the loop while overdubbing on to it. An <m>overdub</m> setting of 1.0 will keep the value of the loop the same while adding new material (it is possible to distort the sample this way). A value of 0.0 will replace the audio in the loop with the incoming audio. There is no limit on the multiplier so you can create out of phase samples (negative values) or digitally distorted samples (by using very high overdub amounts)."
args = [
	{ name='amplitude', type='float', optional=0 }
]

[messages.play]
digest = 'Play the <o>karma~</o> <o>buffer~</o>'
description = "Play the <o>karma~</o> <o>buffer~</o> from <b>stopped</b> or <b>recording</b> or <b>appending</b> state, or play from <o>buffer~</o> beginning if already in a <b>playing</b> state."

[messages.position]
digest = 'Window position start'
description = "Window position start point (in normalised phase float 0..1)."
args = [
	{ name='start', type='float', optional=0 }
]

[messages.record]
digest = 'Start recording'
description = 'Begins recording into the <o>karma~</o> <o>buffer~</o>. If the object is in a stopped state, a <m>record</m> message will begin recording a new loop. If the object is in a playing state, a <m>record</m> message will begin overdubbing. If the object is in an overdubbing state, a <m>record</m> message will put the object in a playing state.'

[messages.resetloop]
digest = 'Reset loop to original loop points'
description = 'Reset the current <o>buffer~</o> loop to the loop points that were created when making the initial loop (the same as sending the message <m>setloop reset</m> to <o>karma~</o>).'

[messages.set]
digest = 'Set a (new) <o>buffer~</o> reference'
description = """
Set a (new) <o>buffer~</o> reference for recording or playback, with optional initial loop points. <o>karma~</o> can switch buffers in real time. <m>set {buffername}</m> with no other arguments sets (new) <o>buffer~</o> reference and (re)sets loop points to entire <o>buffer~</o> length. <m>set {buffername}</m> followed by two floats sets a new <o>buffer~</o> with new start/end loop points in milliseconds. <m>set {buffername}</m> followed by two floats and a further <m>symbol</m> sets the units the float arguments are representing. <br /><br />
This units symbol can be one of:<br/>
<m>phase</m> or <m>ph</m>, representing normalised values 0..1<br/>
<m>samples</m> or <m>samps</m>, representing values given in samples<br/>
<m>milliseconds</m> or <m>ms</m>, representing values given in milliseconds (default)<br/>
"""
args = [
	{ name='buffername', type='symbol', optional=0 },
	{ name='start', type='float', optional=1, units='variable'},
	{ name='end', type='float', optional=1, units='variable' },
	{ name='units', type='symbol', optional=1 }
]

[messages.setloop]
digest = 'Set <o>karma~</o> loop points'
description = 'Points (start/end) for setting <o>karma~</o> loop in selected <o>buffer~</o> (not <m>window</m>!). <m>setloop</m> with no arguments sets the loop to the entire <o>buffer~</o> length. <m>setloop reset</m> sets the loop points to those created when making the initial loop (the same as sending the <m>resetloop</m> message to <o>karma~</o>).'
args = [
	{ name='reset/start', type='symbol/float', optional='1' },
	{ name='end', type='float', optional=1 }
]

[messages.stop]
digest = 'Stop transport'
description = 'Stops <o>karma~</o> playback or recording immediately. If the creation of an initial loop is ended with a <m>stop</m> message, it will also define the beginning and end points for the loop.'

[messages.window]
digest = 'Window size'
description = 'Window size (in normalised segment length float 0..1).'

[attributes]

[attributes.interp]
digest = "Playback interpolation type"
description = """
Sets the <b>interpolation</b> mode used during playback. A setting of <m>interp 0</m> will only allow linear interpolation to be used at all times. The default setting of <m>interp 1</m> will use linear interpolation whilest recording and cubic interpolation during regular playback. This is most noticable when switching between overdub and playback and slower playback speeds as one can hear the aliasing more with playback that uses linear interpolation. <m>interp 2</m> is the same as <m>1</m> but for spline interpolation during playback.<br/><br />
Available options:<br/>
0 = <b>linear</b><br/>
1 = <b>cubic</b><br/>
2 = <b>spline</b><br/>
"""
type="enum"
size=1
default = { value=1, size=1, type="int" }

[attributes.ramp]
digest = 'Ramp fade time in samples'
description = 'Sets the offline ramp fade time in samples. These are the cosine-based ramps which happen outside the direction of travel of the playhead to declick the recording, as well as a real time fade at the record input to declick the recording outside real time awareness. Since the record head trails the play head by 1 sample, the cosine fades are never heard during their creation, only after the play head loops around or changes direction to go over them.'
type='int'
size=1
default = { value=256, size=1, type="int" }

[attributes.report]
digest = 'List outlet update rate'
description = 'Sets the update rate in milliseconds for the list output.'
type='int'
size='1'
default = { value=50.0, type="int", size=1 }

[attributes.snrcurv]
digest = "Curve type for 'Switch and Ramp' function"
description = """
Applies easing functions to the 'Switch and Ramp' algorithm to allow for different in and out curves.<br/><br />
The different curve types available are:<br/>
0 = <b>linear</b><br/>
1 = <b>sine</b><br/>
2 = <b>cubic ease in</b><br/>
3 = <b>cubic ease out</b><br/>
4 = <b>exponential ease in</b><br/>
5 = <b>exponential ease out</b><br/>
6 = <b>exponential ease in and out</b>
"""
default = { value=1, size=1, type="int" }

[attributes.snramp]
digest = "'Switch and Ramp' fade time in samples"
description = "Sets the fade time for 'Switch and Ramp' in samples, independently of the offline ramp time set via ramp. 'Switch and Ramp' declicks instantaneous changes at the playback, primarily when jumping around the buffer arbitrarily."
default = { value=256, size=1, type="int" }

[attributes.syncout]
digest = "Create an audio rate sync outlet"
description = """
Set as <m>integer</m> flag <b>0</b> or <b>1</b>. With <m>syncout</m> switched on, <o>karma~</o> will add an additional audio signal outlet to the object, after the audio outs and before the final data outlet. This outlet is an audio rate sync signal 0..1 for audio rate synchronous matching to other MSP processes. With <m>syncout</m> switched off (the default), <o>karma~</o> will have no additional outlets. <br /><br />
<b>This attribute cannot be sent to the object dynamically or changed in the inspector, it is only available at instantiation time</b>.
"""
default = { value=0, size=1, type="int" }
